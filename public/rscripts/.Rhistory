which.min(2, 3)
which.min(2)
which.min(c(2, 4))
5 % 1
5 %% 1
1/5
5 * .2
10 %% 3
3 /10
.3 * 10
0.3 * 10
0.3 * 10.0
candies <- function(n, m) {
if(n == m) {
m
} else if(n > m) {
0
} else if(n == 1) {
(n / m) * m + n
} else {
(n / m) * m * n
}
}
candies(2, 3)
candies(2, 4)
candies(9, 10)
candies <- function(n, m) {
if(n == m) {
m
} else if(n > m) {
0
} else {
(n / m) * m
}
}
candies(9, 10)
candies(2, 3)
candies(9, 10)
candies(5, 10)
3 %% 10
5 %% 10
4 %% 9
4 / 9
9 / .4444
9 * .4444
7 \ 9
7 / 9
2 / 9
9 / 2
10 %% 3
3 %% 10
4 %% 9
4 %% 6
5 %% 9
1 %% 10
4 / 10
3 / 10
10 / 3
10 / .3
10 * .3
10 / .4
10 * .4
10 / 4
10 / 3
round((10 / 3), 0)
10 / 6
9%%n
9%%5
1440 %% 60
60 %% 1440
5 %% 2
1439 %% 60
60 %% 60
as.numeric(paste0((1439 / 60), (1439 %% 60), collapse = "")
)
paste0((1439 / 60), (1439 %% 60), collapse = "")
paste0(round(1439 / 60)), (1439 %% 60), collapse = "")
paste0(round(1439 / 60), 2), (1439 %% 60), collapse = "")
paste0(round((1439 / 60), 2), (1439 %% 60), collapse = "")
1439 %% 60
paste0(round((1439 / 60), 0), (1439 %% 60), collapse = "")
paste0(floor(round((1439 / 60), 0)), (1439 %% 60), collapse = "")
paste0(round(floor(1439 / 60), 0)), (1439 %% 60), collapse = "")
paste0(round(floor(1439 / 60), 0), (1439 %% 60), collapse = "")
time <- paste0(round(floor(1439 / 60), 0), (1439 %% 60), collapse = "")
str_splt <- strsplit(as.character(time), split = "")
sum_str <- c()
for(i in nchar(str_splt)) {
sum_str[i] <- as.numeric(str_splt[[1]][i])
}
sum_str
time <- paste0(round(floor(1439 / 60), 0), (1439 %% 60), collapse = "")
str_splt <- strsplit(as.character(time), split = "")
sum_str <- c()
for(i in nchar(time)) {
sum_str[i] <- as.numeric(str_splt[[1]][i])
}
sum_str
as.numeric(str_splt[[1]][1])
str_splt <- as.vector(strsplit(as.character(time), split = ""))
str_splt <- as.vector(strsplit(as.character(time), split = ""))
str_splt <- strsplit(as.character(time), split = "")
sum_str <- sum(as.numeric(str_splt[[1]]))
factanal(3)
factorial(1)
factorial(5)
test <- list(1, 2, 3)
test
?sort
vector(1:5)
as.vector(1:5)
test <- as.vector(1:5)
testpos1 <- test[1]
testpos2 <- test[length(test)]
test[c(1, 5)] <- c(testpos2, testpos1)
testList <- list(c(1:5), c(5:10), c(11:15))
testList[1]
testList[[1]]
testList[sapply(testList, function(x) x[1]) != 1]
testList[sapply(testList, function(x) x[1][1]) != 1]
testList[sapply(testList, function(x) x[1] != 1)]
testList[sapply(testList, function(x) x[x] != 1)]
testList[sapply(testList, function(x) x != 1)]
test <- as.vector(1:5)
testpos1 <- test[1]
testpos2 <- test[length(test)]
test[c(1, 5)] <- c(testpos2, testpos1)
test <- as.vector(1:5)
testpos1 <- test[1]
testpos2 <- test[length(test)]
test[c(1, 5)] <- c(testpos2, testpos1)
firstReverseTry <- function(arr) {
testpos1 <- arr[1]
testpos2 <- arr[length(arr)]
arr[c(1, length(arr))] <- c(testpos2, testpos1)
}
firstReverseTry(c[1, 2, 3, 4, 5])
firstReverseTry(c(1, 2, 3, 4, 5))
firstReverseTry <- function(arr) {
testpos1 <- arr[1]
testpos2 <- arr[length(arr)]
arr[c(1, length(arr))] <- c(testpos2, testpos1)
return(arr)
}
firstReverseTry(c(1, 2, 3, 4, 5))
test <- list()
test <- c()
library(dplyr)
library(tidyr)
library(xlsx)
all_subs <- readxl::read_excel("all_sub.csv")
all_subs <- readxl::read_excel("all_sub.xlsx")
?raw
?`raw-class`
typeof
?typeof()
library(tibble)
?rownames_to_column
library(dplyr)
?left_join
?lag
?lead
?do.call
?left_join
?bind_rows
install.packages("xts")
2 %/% 2
3 %/% 2
length(1)
length(2)
length(2.2)
nchar(2.2)
2 %% 2
3 %% 2
4 %% 2
length(list(1, 2, 3))
length(list(1, 2, 3)) / 2
library(tidyverse)
# Create path to Qualtrics poll data
cc_rsvp_path <- file.info(
list.files("~/../downloads", pattern = "Common.*Spring",  full.names = T)) %>%
rownames_to_column() %>%
filter(mtime == max(mtime)) %>%
select(rowname) %>%
unlist()
# Create capitalize first letter function
simpleCap <- function(x) {
s <- strsplit(x, " ")
map_chr(s, ~ paste(toupper(substring(.x, 1,1)), substring(.x, 2),
sep = "", collapse = " "))
}
# Import Qualtrics data
cc_rsvp <- read.csv(cc_rsvp_path, skip = 1, stringsAsFactors = F) %>%
# Edit attendee name typos
#cc_rsvp[grepl("Emma's", cc_rsvp$Last.Name), "Last.Name"] <- "Emmons"
# Format rsvp list
cc_rsvp <- cc_rsvp %>%
# Select columns and underscore variables
select(8, 17:18, "Katherine Gehl and Michael Porter" = 19,
"Kathy Giusti and Richard Hamermesh" = 20, "Rebecca Henderson" = 21) %>%
set_names(gsub("\\.", "_", names(.))) %>%
set_names(gsub(" ", "_", names(.))) %>%
# Edit attendee name typos
mutate(Last_Name = ifelse(Last_Name == "Emma's", "Emmons", Last_Name)) %>%
# Remove extra leading and trailing whitespace from first and last name
mutate_at(vars(matches("Name")), funs(gsub("^\\s+|\\s+$", "", .))) %>%
# Filter only most recent rsvp
group_by(Last_Name) %>%
filter(Recorded_Date == max(Recorded_Date)) %>%
ungroup() %>%
# Filter only full names
filter(!First_Name == "" & !Last_Name == "",
!row_number() == 1) %>%
# Capitalize first and last name
mutate_at(vars(matches("Name")), funs(simpleCap(.)))
cc_rsvp <- read.csv(cc_rsvp_path, skip = 1, stringsAsFactors = F) %>%
# Edit attendee name typos
#cc_rsvp[grepl("Emma's", cc_rsvp$Last.Name), "Last.Name"] <- "Emmons"
# Format rsvp list
#cc_rsvp <- cc_rsvp %>%
# Select columns and underscore variables
select(8, 17:18, "Katherine Gehl and Michael Porter" = 19,
"Kathy Giusti and Richard Hamermesh" = 20, "Rebecca Henderson" = 21) %>%
set_names(gsub("\\.", "_", names(.))) %>%
set_names(gsub(" ", "_", names(.))) %>%
# Edit attendee name typos
mutate(Last_Name = ifelse(Last_Name == "Emma's", "Emmons", Last_Name)) %>%
# Remove extra leading and trailing whitespace from first and last name
mutate_at(vars(matches("Name")), funs(gsub("^\\s+|\\s+$", "", .))) %>%
# Filter only most recent rsvp
group_by(Last_Name) %>%
filter(Recorded_Date == max(Recorded_Date)) %>%
ungroup() %>%
# Filter only full names
filter(!First_Name == "" & !Last_Name == "",
!row_number() == 1) %>%
# Capitalize first and last name
mutate_at(vars(matches("Name")), funs(simpleCap(.)))
View(cc_rsvp)
cc_rsvp <- read.csv(cc_rsvp_path, skip = 1, stringsAsFactors = F) %>%
# Edit attendee name typos
#cc_rsvp[grepl("Emma's", cc_rsvp$Last.Name), "Last.Name"] <- "Emmons"
# Format rsvp list
#cc_rsvp <- cc_rsvp %>%
# Select columns and underscore variables
select(8, 17:18, "Katherine Gehl and Michael Porter" = 19,
"Kathy Giusti and Richard Hamermesh" = 20, "Rebecca Henderson" = 21) %>%
set_names(gsub("\\.", "_", names(.))) %>%
set_names(gsub(" ", "_", names(.))) %>%
# Edit attendee name typos
mutate(Last_Name = ifelse(Last_Name == "Emma's", "Emmons", Last_Name))
source('C:/Users/Clayton/Dropbox/Coding_Projects/R/Events/Common_Connections_2017/cc_rsvp.R', echo=TRUE)
?commandArgs
hist(mtcars)
hist(mtcars[1])
mtcars
?hist
hist(islands)
islands
head(islands)
class(islands)
class(mtcars[1])
class(mtcars[,1])
hist(mtcars[,1])
hist(mtcars[,1], name(mtcars[1]))
hist(mtcars[,1], names(mtcars[1]))
?hist
hist(mtcars[,1], main = names(mtcars[1]))
args()
?args
?pbg
?png
?commandArgs
hist(mtcars[,1], main = "title")
t <- 1
t[1]
names(mtcars[1])
readxl::read_excel("ncaa_team_data.xlsx")
readxl::read_excel("Dropbox/ncaa_team_data.xlsx")
getwd()
readxl::read_excel("../Dropbox/ncaa_team_data.xlsx")
ncaa <- readxl::read_excel("../Dropbox/ncaa_team_data.xlsx")
ncaa_tidy <- ncaa %>%
View(ncaa)
library(tidyverse)
View(ncaa)
ncaa_tidy <- ncaa %>%
gather(sport, athletes, 2:7)
View(ncaa_tidy)
ncaa %>% ggplot(aes(factor(year), athletes, group = sport, col = sport)) + geom_point()
ncaa_tidy %>% ggplot(aes(factor(year), athletes, group = sport, col = sport)) + geom_point()
readxl::read_excel("ncaa_team_data.xlsx")
ncaa <- readxl::read_excel("../Dropbox/ncaa_team_data.xlsx")
ncaa_tidy <- ncaa %>%
gather(sport, athletes, 2:7)
ncaa_tidy %>% ggplot(aes(factor(year), athletes, group = sport, col = sport)) + geom_point()
tech <- readxl::read_excel("../Dropbox/tech_stocks.xlsx")
file.size(tech)
tech_tidy <- tech %>%
tidyr::gather(company, price, 2:9)
View(tech)
tech <- readxl::read_excel("../Dropbox/tech_stocks.xlsx")
tech_tidy <- tech %>%
tidyr::gather(company, price, 2:11)
library(tidyverse)
tidyr::gather(company, price, 2:11)
tech_tidy <- tech %>%
tidyr::gather(company, price, 2:11)
View(tech_tidy)
object.size(tech)
object.size(tech_tidy)
tech_tidy %>% ggplot(aes(Date, Price, group = company, col = company)) + geom_line()
tech_tidy %>% ggplot(aes(Date, price, group = company, col = company)) + geom_line()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_line()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_smooth()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_violin()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_abline()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_smooth(method = "lm")
library(ggthemes)
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_line() + theme_economist()
tech_tidy %>% filter(company != "Google") %>% ggplot(aes(Date, price, group = company, col = company)) + geom_line() + theme_economist() + scale_color_economist()
install.packages("quantmod")
library(quantmod)
getSymbols(c("AAPL", "FB", "SAP"))
library(tidyverse)
tech <- c("AAPL", "SAP", "FB")
for (i in tech) {
getSymbols(i)
Cl(i)
}
Cl(AAPL)
tech <- getSymbols(c("AAPL", "SAP", "FB"))
tech <- getSymbols(c("AAPL", "SAP", "FB"))
techList <- list(AAPL, FB, SAP)
tech <- list(getSymbols(c("AAPL", "SAP", "FB")))
ls
ls()
objects()
techClose <- map(techList, ~ Cl(.))
techClose <- techList %>%
map(~ Cl(.))
techClose <- techList %>%
map(~ Cl(.)) %>%
as_data_frame()
techClose <- techList %>%
map(~ Cl(.)) %>%
bind_cols()
techClose <- techList %>%
map(., ~ Cl(.)) %>%
map_df(., bind_cols(.[1]))
techClose[[1]]
currencies.oanda
test <- currencies.oanda
getSymbols.yahoo()
techClose <- techList %>%
map(., ~ Cl(.)) %>%
map_df(., bind_cols(.[.]))
techClose <- techList %>%
map(., ~ Cl(.)) %>%
map_df(., bind_cols(.[[.]]))
techClose[[1]][1]
techClose[[1]]
unlist(techClose[[1]])
as_data_frame(techClose[[1]])
as.xts(techClose[[1]])
for (i in techList) {
Cl(i))
}
for (i in techList) {
Cl(i)
}
techClose <- techList %>%
map(., ~ Cl(.))
for (i in techClose) {
as.xts(i)
}
for (i in techClose) {
i <- as.xts(i)
}
for (i in techClose) {
i[i] <- as.xts(i)
}
i
getSymbols(c("AAPL", "SAP", "FB"), env = "tech")
getSymbols(c("AAPL", "SAP", "FB"), env = new.env())
new.env()
techEnv <- new.env()
getSymbols(c("AAPL", "SAP", "FB"), techEnv)
techEnv
techEnv$AAPL
techEnv <- techEnv %>%
Cl(.
)
for (i in techEnv) {
print(i)
}
getSymbols(c("AAPL", "SAP", "FB"))
getSymbols(c("AAPL", "SAP", "FB"))
get("AAPL")
?eapply
eapply(get("AAPL"), Cl)
eapply(env, Cl)
techEnv <- new.env()
getSymbols(c("AAPL", "SAP", "FB"), techEnv)
eapply(techEnv, Cl)
head(eapply(techEnv, Cl))
techList <- eapply(techEnv, Cl))
techList <- eapply(techEnv, Cl)
techList[1]
techList[[1]]
AAPL["Data"]
dfs <- ls()[sapply(mget(ls(), .GlobalEnv), is.xts)]
dfs <- ls()[map_chr(mget(ls(), .GlobalEnv), is.xts)]
?mget
sapply( dfs, function(x)  str( get( x ) ) )
dfs <- ls()[map_chr(mget(ls(), .GlobalEnv), is.xts)]
dfs <- ls()[map(mget(ls(), .GlobalEnv), is.xts)]
dfs <- ls()[map_db(mget(ls(), .GlobalEnv), is.xts)]
dfs <- ls()[map_dbl(mget(ls(), .GlobalEnv), is.xts)]
sapply( dfs, function(x)  str( get( x ) ) )
map_chr( dfs, function(x)  str( get( x ) ) )
map( dfs, function(x)  str( get( x ) ) )
map( dfs, function(x)  Cl( get( x ) ) )
map(dfs, ~  Cl(get(.)))
getSymbols(c("AAPL", "SAP", "FB"))
dfs <- ls()[map_dbl(mget(ls(), .GlobalEnv), is.xts)]
dfs <- ls()[sapply(mget(ls(), .GlobalEnv), is.xts)]
map(dfs, ~  Cl(get(.)))
tail(AAPL)
?do.call
do.call(AAPL, nrow)
do.call(nrow, AAPL)
do.call(nrow, map(dfs, ~ Cl(.))
)
do.call(nrow, map(dfs, ~ Cl(get(.)))
)
do.call(nrow, map(dfs, ~ Cl(get(.))))
do.call(nrow, map(dfs, ~ sum(get(.))))
do.call(merge, map(dfs, ~ Cl(get(.))))
.
tech <- c("AAPL", "SAP", "FB")
getSymbols(tech)
techClose <- do.call(merge, map(tech, ~ Cl(get(.))))
ggplot(techClose, aes(AAPL.Close)) + geom_histogram()
chart_Series(techClose)
chartSeries(techClose)
?chart_Series
?chartSeries()
getSymbols(tech)
as_data_frame(AAPL)
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame()
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
names(set_names(., tech))
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
names(set_names(tech))
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech)
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame()
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech)
View(techClose)
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech) %>%
mutate(date = row.names(.)) %>%
gather(company, value, 1:length(tech))
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech) %>%
mutate(date = row.names(.))
tech <- c("AAPL", "SAP", "FB")
getSymbols(tech)
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech) %>%
mutate(date = row.names(.)) %>%
gather(company, value, 1:length(tech))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(techClose, aes(date, value, col = company, group = company)) +
geom_line()
ggplot(techClose, aes(date, value, col = company, group = company)) +
geom_line()
?ggplot
techClose <- do.call(merge, map(tech, ~ Cl(get(.)))) %>%
as_data_frame() %>%
set_names(tech) %>%
mutate(date = as.Date(row.names(.))) %>%
gather(company, value, 1:length(tech))
ggplot(techClose, aes(date, value, col = company, group = company)) +
geom_line()
source('C:/xampp/htdocs/a3/public/rscripts/tech_xts.R', echo=TRUE)
install.packages("Quandl")
library(Quandl)
metaData(ts)
metaData("AAPL")
Quandl("NSE/OIL")
setwd("C:/xampp/htdocs/a4/public/rscripts")
library(Quandl)
quandl.api("ZNUBmiZ3d-zMyLGBxyUt")
?quandl.api
Quandl.api_key("ZNUBmiZ3d-zMyLGBxyUt")
data <- Quandl('NSE/OIL', type = "xts")
data <- Quandl('WIKI/GAS', type = "xts")
data
data <- Quandl('GOOG/NASDAQ_ACHC', type = "xts")
source('C:/xampp/htdocs/a4/public/rscripts/quandl_data.R', echo=TRUE)
